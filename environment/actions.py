import numpy as np

# Moving to adjacent edges
ACTION_WAIT = 0
ACTION_MOVE_RIGHT = 1
ACTION_MOVE_UP = 2
ACTION_MOVE_LEFT = 3
ACTION_MOVE_DOWN = 4
ACTIONSET_MOVE = {ACTION_WAIT, ACTION_MOVE_RIGHT, ACTION_MOVE_UP, ACTION_MOVE_LEFT, ACTION_MOVE_DOWN}

# Extracting resources or attacking enemies in tiles
ACTION_INTERACT = 5
ACTION_INTERACT_RIGHT = 6
ACTION_INTERACT_UP = 7
ACTION_INTERACT_LEFT = 8
ACTION_INTERACT_DOWN = 9
ACTIONSET_INTERACT = {ACTION_INTERACT, ACTION_INTERACT_RIGHT, ACTION_INTERACT_UP, ACTION_INTERACT_LEFT, ACTION_INTERACT_DOWN}

SKILL_CHOPPING = 0
SKILL_MINING = 1
SKILL_FISHING = 2
SKILL_CRAFTING = 3
SKILL_COMBAT = 4
ORDERED_SKILLSET = [SKILL_CHOPPING, SKILL_MINING, SKILL_FISHING, SKILL_CRAFTING, SKILL_COMBAT]
SKILLSET = set(ORDERED_SKILLSET)

ACTION_TRAIN = 10
ACTIONSET_TRAIN = {ACTION_TRAIN + i for i in range(len(SKILLSET))}

position_offsets = [(0,0), (1,0), (0,1), (-1,0), (0,-1)]

ACTIONTYPE_MOVE = 0
ACTIONTYPE_INTERACT = 1
ACTIONTYPE_TRAIN = 2

def parse_action(action) -> tuple[int,int]:
    if action in ACTIONSET_MOVE:
        return (ACTIONTYPE_MOVE, action - ACTION_WAIT)
    elif action in ACTIONSET_INTERACT:
        return (ACTIONTYPE_INTERACT, action - ACTION_INTERACT)
    elif action in ACTIONSET_TRAIN:
        return (ACTIONTYPE_TRAIN, action - ACTION_TRAIN)

